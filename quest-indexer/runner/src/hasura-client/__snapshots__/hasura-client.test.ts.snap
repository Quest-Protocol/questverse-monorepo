// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HasuraClient adds a datasource 1`] = `
{
  "args": {
    "configuration": {
      "connection_info": {
        "database_url": {
          "connection_parameters": {
            "database": "morgs_near",
            "host": "localhost",
            "password": "password",
            "port": 5432,
            "username": "morgs_near",
          },
        },
      },
    },
    "name": "morgs_near",
  },
  "type": "pg_add_source",
}
`;

exports[`HasuraClient adds the specified permissions for the specified roles/table/schema 1`] = `
{
  "args": [
    {
      "args": {
        "permission": {
          "allow_aggregations": true,
          "check": {},
          "columns": "*",
          "computed_fields": [],
          "filter": {},
        },
        "role": "role",
        "source": "default",
        "table": {
          "name": "height",
          "schema": "schema",
        },
      },
      "type": "pg_create_select_permission",
    },
    {
      "args": {
        "permission": {
          "check": {},
          "columns": "*",
          "computed_fields": [],
          "filter": {},
        },
        "role": "role",
        "source": "default",
        "table": {
          "name": "height",
          "schema": "schema",
        },
      },
      "type": "pg_create_insert_permission",
    },
    {
      "args": {
        "permission": {
          "check": {},
          "columns": "*",
          "computed_fields": [],
          "filter": {},
        },
        "role": "role",
        "source": "default",
        "table": {
          "name": "height",
          "schema": "schema",
        },
      },
      "type": "pg_create_update_permission",
    },
    {
      "args": {
        "permission": {
          "check": {},
          "columns": "*",
          "computed_fields": [],
          "filter": {},
        },
        "role": "role",
        "source": "default",
        "table": {
          "name": "height",
          "schema": "schema",
        },
      },
      "type": "pg_create_delete_permission",
    },
    {
      "args": {
        "permission": {
          "allow_aggregations": true,
          "check": {},
          "columns": "*",
          "computed_fields": [],
          "filter": {},
        },
        "role": "role",
        "source": "default",
        "table": {
          "name": "width",
          "schema": "schema",
        },
      },
      "type": "pg_create_select_permission",
    },
    {
      "args": {
        "permission": {
          "check": {},
          "columns": "*",
          "computed_fields": [],
          "filter": {},
        },
        "role": "role",
        "source": "default",
        "table": {
          "name": "width",
          "schema": "schema",
        },
      },
      "type": "pg_create_insert_permission",
    },
    {
      "args": {
        "permission": {
          "check": {},
          "columns": "*",
          "computed_fields": [],
          "filter": {},
        },
        "role": "role",
        "source": "default",
        "table": {
          "name": "width",
          "schema": "schema",
        },
      },
      "type": "pg_create_update_permission",
    },
    {
      "args": {
        "permission": {
          "check": {},
          "columns": "*",
          "computed_fields": [],
          "filter": {},
        },
        "role": "role",
        "source": "default",
        "table": {
          "name": "width",
          "schema": "schema",
        },
      },
      "type": "pg_create_delete_permission",
    },
  ],
  "type": "bulk",
}
`;

exports[`HasuraClient checks if a schema exists within source 1`] = `
[
  [
    "mock-hasura-endpoint/v2/query",
    {
      "body": "{"type":"run_sql","args":{"sql":"SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'schema'","read_only":true,"source":"source"}}",
      "headers": {
        "X-Hasura-Admin-Secret": "mock-hasura-admin-secret",
      },
      "method": "POST",
    },
  ],
]
`;

exports[`HasuraClient checks if datasource exists 1`] = `
{
  "args": {},
  "type": "export_metadata",
  "version": 2,
}
`;

exports[`HasuraClient creates a schema 1`] = `
[
  [
    "mock-hasura-endpoint/v2/query",
    {
      "body": "{"type":"run_sql","args":{"sql":"CREATE schema schemaName","read_only":false,"source":"dbName"}}",
      "headers": {
        "X-Hasura-Admin-Secret": "mock-hasura-admin-secret",
      },
      "method": "POST",
    },
  ],
]
`;

exports[`HasuraClient gets table names within a schema 1`] = `
{
  "args": {
    "source": "source",
  },
  "type": "pg_get_source_tables",
}
`;

exports[`HasuraClient runs migrations for the specified schema 1`] = `
[
  [
    "mock-hasura-endpoint/v2/query",
    {
      "body": "{"type":"run_sql","args":{"sql":"\\n      set schema 'schemaName';\\n      CREATE TABLE blocks (height numeric)\\n      ","read_only":false,"source":"dbName"}}",
      "headers": {
        "X-Hasura-Admin-Secret": "mock-hasura-admin-secret",
      },
      "method": "POST",
    },
  ],
]
`;

exports[`HasuraClient tracks foreign key relationships 1`] = `
{
  "args": {
    "read_only": true,
    "source": "source",
    "sql": "
      SELECT
        COALESCE(json_agg(row_to_json(info)), '[]'::JSON)
      FROM (
        SELECT
          q.table_schema::text AS table_schema,
          q.table_name::text AS table_name,
          q.constraint_name::text AS constraint_name,
          min(q.ref_table_table_schema::text) AS ref_table_table_schema,
          min(q.ref_table::text) AS ref_table,
          json_object_agg(ac.attname, afc.attname) AS column_mapping,
          min(q.confupdtype::text) AS on_update,
          min(q.confdeltype::text) AS
          on_delete
        FROM (
          SELECT
            ctn.nspname AS table_schema,
            ct.relname AS table_name,
            r.conrelid AS table_id,
            r.conname AS constraint_name,
            cftn.nspname AS ref_table_table_schema,
            cft.relname AS ref_table,
            r.confrelid AS ref_table_id,
            r.confupdtype,
            r.confdeltype,
            unnest(r.conkey) AS column_id,
            unnest(r.confkey) AS ref_column_id
          FROM
            pg_constraint r
            JOIN pg_class ct ON r.conrelid = ct.oid
            JOIN pg_namespace ctn ON ct.relnamespace = ctn.oid
            JOIN pg_class cft ON r.confrelid = cft.oid
            JOIN pg_namespace cftn ON cft.relnamespace = cftn.oid
          WHERE
            r.contype = 'f'::"char"
            AND ((ctn.nspname='public'))
            ) q
          JOIN pg_attribute ac ON q.column_id = ac.attnum
            AND q.table_id = ac.attrelid
          JOIN pg_attribute afc ON q.ref_column_id = afc.attnum
            AND q.ref_table_id = afc.attrelid
          GROUP BY
            q.table_schema,
            q.table_name,
            q.constraint_name) AS info;
      ",
  },
  "type": "run_sql",
}
`;

exports[`HasuraClient tracks foreign key relationships 2`] = `
{
  "args": [
    {
      "args": {
        "name": "comments",
        "source": "source",
        "table": {
          "name": "posts",
          "schema": "public",
        },
        "using": {
          "foreign_key_constraint_on": {
            "column": "post_id",
            "table": {
              "name": "comments",
              "schema": "public",
            },
          },
        },
      },
      "type": "pg_create_array_relationship",
    },
    {
      "args": {
        "name": "post",
        "source": "source",
        "table": {
          "name": "comments",
          "schema": "public",
        },
        "using": {
          "foreign_key_constraint_on": "post_id",
        },
      },
      "type": "pg_create_object_relationship",
    },
    {
      "args": {
        "name": "post_likes",
        "source": "source",
        "table": {
          "name": "posts",
          "schema": "public",
        },
        "using": {
          "foreign_key_constraint_on": {
            "column": "post_id",
            "table": {
              "name": "post_likes",
              "schema": "public",
            },
          },
        },
      },
      "type": "pg_create_array_relationship",
    },
    {
      "args": {
        "name": "post",
        "source": "source",
        "table": {
          "name": "post_likes",
          "schema": "public",
        },
        "using": {
          "foreign_key_constraint_on": "post_id",
        },
      },
      "type": "pg_create_object_relationship",
    },
  ],
  "type": "bulk",
}
`;

exports[`HasuraClient tracks the specified tables for a specified schema 1`] = `
{
  "args": [
    {
      "args": {
        "source": "source",
        "table": {
          "name": "height",
          "schema": "schema",
        },
      },
      "type": "pg_track_table",
    },
    {
      "args": {
        "source": "source",
        "table": {
          "name": "width",
          "schema": "schema",
        },
      },
      "type": "pg_track_table",
    },
  ],
  "type": "bulk",
}
`;

exports[`HasuraClient untracks the specified tables 1`] = `
[
  [
    "mock-hasura-endpoint/v1/metadata",
    {
      "body": "{"type":"bulk","args":[{"type":"pg_untrack_table","args":{"table":{"schema":"schema","name":"height"},"source":"default","cascade":true}},{"type":"pg_untrack_table","args":{"table":{"schema":"schema","name":"width"},"source":"default","cascade":true}}]}",
      "headers": {
        "X-Hasura-Admin-Secret": "mock-hasura-admin-secret",
      },
      "method": "POST",
    },
  ],
]
`;
